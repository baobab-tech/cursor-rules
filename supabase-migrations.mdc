---
description: Database migrations, creating new migrations
alwaysApply: false
---
# Supabase Migrations & Development Workflow

## Local Development Setup

### Initial Setup

```bash
# Install Supabase CLI
pnpm install -g @supabase/cli

# Initialize Supabase in your project
supabase init

# Start local Supabase stack
supabase start

# Check status
supabase status
```

### Environment Configuration

```bash
# .env.local
NEXT_PUBLIC_SUPABASE_URL=http://localhost:54321
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-local-anon-key
SUPABASE_SERVICE_ROLE_KEY=your-local-service-role-key

# .env.production.local
NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-prod-anon-key
SUPABASE_SERVICE_ROLE_KEY=your-prod-service-role-key
```

## Database Migrations

### Creating Migrations

#### Approach Option 1 (intentional change)
```bash
# Create a new migration
supabase migration new create_chats_table

# Create migration for schema changes
supabase migration new add_user_profiles

# Create migration for RLS policies
supabase migration new setup_rls_policies

# Then you run
supabase migration up # to apply the migration to the local db

# Only if the users asks you can then push to the remote
supabase db push # to push the changes to the remote db

```

#### Approach Option 2 (change the schema then diff)

```bash
supabase db diff -f <migration_name>
```

### Migration Examples

```sql
-- 20240101000001_create_chats_table.sql
CREATE TABLE IF NOT EXISTS chats (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  title TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
);

-- Enable RLS
ALTER TABLE chats ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can read own chats" ON chats
  FOR SELECT TO authenticated
  USING (user_id = auth.uid());


-- Create indexes
CREATE INDEX idx_chats_user_id ON chats(user_id);

-- Create updated_at trigger
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
...

```

### Complex Migration Patterns

```sql
-- 20240101000002_add_message_attachments.sql
-- Add new column with default value
ALTER TABLE messages 
ADD COLUMN attachments JSONB DEFAULT '[]';

-- Migrate existing data if needed
UPDATE messages 
SET attachments = '[]' 
WHERE attachments IS NULL;

-- Add constraint
ALTER TABLE messages 
ADD CONSTRAINT attachments_is_array 
CHECK (jsonb_typeof(attachments) = 'array');
```

## Database Functions

### Custom Functions

```sql
-- 20240101000003_add_search_functions.sql
CREATE OR REPLACE FUNCTION search_messages(
  query TEXT,
  user_id UUID,
  limit_count INT DEFAULT 10
)
RETURNS TABLE (
  message_id UUID,
  content TEXT,
  chat_title TEXT,
  created_at TIMESTAMPTZ
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    m.id,
    m.content,
    c.title,
    m.created_at
  FROM messages m
  JOIN chats c ON m.chat_id = c.id
  WHERE 
    c.user_id = search_messages.user_id
    AND m.content ILIKE '%' || query || '%'
  ORDER BY m.created_at DESC
  LIMIT limit_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Grant execute permission
GRANT EXECUTE ON FUNCTION search_messages TO authenticated;
```

### Utility Functions

```sql
-- Get user statistics
CREATE OR REPLACE FUNCTION get_user_stats(user_id UUID)
RETURNS JSON AS $$
DECLARE
  result JSON;
BEGIN
  SELECT json_build_object(
    'total_chats', (
      SELECT COUNT(*) FROM chats WHERE chats.user_id = get_user_stats.user_id
    ),
    'total_messages', (
      SELECT COUNT(*) FROM messages m
      JOIN chats c ON m.chat_id = c.id
      WHERE c.user_id = get_user_stats.user_id
    ),
    'last_active', (
      SELECT MAX(updated_at) FROM chats WHERE chats.user_id = get_user_stats.user_id
    )
  ) INTO result;
  
  RETURN result;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
```

## Development Workflow

### Daily Development Commands

```bash
# Reset database to latest migration
supabase db reset

# Apply new migrations
supabase db push

# Generate TypeScript types
supabase gen types typescript --local > types/supabase.ts

# Dump current schema for backup
supabase db dump --local -f backup.sql

# Start fresh with seed data
supabase db reset --linked
```

### Schema Diffing

```bash
# Compare local with remote
supabase db diff --linked

# Generate migration from diff
supabase db diff --linked --file new_changes

# Create migration from schema changes
supabase db diff --file create_new_table --schema public
```

## CI/CD Integration

### GitHub Actions Workflow

```yaml
# .github/workflows/database.yml
name: Database CI/CD

on:
  push:
    branches: [main]
    paths: ['supabase/migrations/**']
  pull_request:
    paths: ['supabase/migrations/**', 'types/**']

env:
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
  SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

jobs:
  test-migrations:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Start Supabase local
        run: supabase start
      
      - name: Run migrations
        run: supabase db reset
      
      - name: Test database functions
        run: |
          supabase test db
      
      - name: Generate and verify types
        run: |
          supabase gen types typescript --local > types/supabase-generated.ts
          if ! git diff --ignore-space-at-eol --exit-code types/supabase.ts types/supabase-generated.ts; then
            echo "Database types are out of sync!"
            echo "Please run: supabase gen types typescript --local > types/supabase.ts"
            exit 1
          fi

  deploy-staging:
    needs: test-migrations
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Deploy to staging
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_STAGING_PROJECT_ID }}
          supabase db push
      
      - name: Run smoke tests
        run: |
          # Add your smoke tests here
          echo "Running post-deployment smoke tests..."

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Deploy to production
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}
          supabase db push
```

### Type Generation Automation

```yaml
# .github/workflows/types.yml
name: Update Types

on:
  push:
    branches: [main]
    paths: ['supabase/migrations/**']

jobs:
  update-types:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Generate types
        run: |
          supabase gen types typescript --project-id ${{ secrets.SUPABASE_PROJECT_ID }} > types/supabase.ts
      
      - name: Commit updated types
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add types/supabase.ts
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update database types"
            git push
          fi
```

## Database Testing

### Test Database Setup

```sql
-- supabase/tests/test_setup.sql
-- Test data insertion
INSERT INTO auth.users (id, email) VALUES 
  ('11111111-1111-1111-1111-111111111111', 'test@example.com'),
  ('22222222-2222-2222-2222-222222222222', 'test2@example.com');

INSERT INTO chats (id, user_id, title) VALUES
  ('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '11111111-1111-1111-1111-111111111111', 'Test Chat 1'),
  ('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb', '22222222-2222-2222-2222-222222222222', 'Test Chat 2');
```

### RLS Policy Testing

```sql
-- supabase/tests/test_rls.sql
-- Test RLS policies
BEGIN;

-- Set user context
SELECT set_config('request.jwt.claim.sub', '11111111-1111-1111-1111-111111111111', true);

-- Test that user can only see their own chats
SELECT id FROM chats;
-- Should only return chat with id 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'

-- Test insert policy
INSERT INTO chats (user_id, title) 
VALUES ('11111111-1111-1111-1111-111111111111', 'New Chat');
-- Should succeed

-- Test trying to insert for different user
INSERT INTO chats (user_id, title) 
VALUES ('22222222-2222-2222-2222-222222222222', 'Unauthorized Chat');
-- Should fail

ROLLBACK;
```

## Monitoring and Maintenance

### Performance Monitoring

```sql
-- Check slow queries
SELECT 
  query,
  calls,
  total_time,
  mean_time,
  rows
FROM pg_stat_statements 
WHERE calls > 100 
ORDER BY mean_time DESC 
LIMIT 10;

-- Check index usage
SELECT 
  schemaname,
  tablename,
  attname,
  n_distinct,
  correlation
FROM pg_stats 
WHERE schemaname = 'public';
```

### Database Maintenance

```bash
# Analyze database performance
supabase db analyze

# Check database size
supabase db size

# Export data
supabase db dump --data-only > data-backup.sql

# Import data
psql -h localhost -p 54322 -U postgres -d postgres < data-backup.sql
```

## Backup and Recovery

### Automated Backups

```bash
# Create backup script
#!/bin/bash
# backup.sh

DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="./backups"

mkdir -p $BACKUP_DIR

# Backup schema
supabase db dump --schema-only > "$BACKUP_DIR/schema_$DATE.sql"

# Backup data
supabase db dump --data-only > "$BACKUP_DIR/data_$DATE.sql"

# Backup complete database
supabase db dump > "$BACKUP_DIR/complete_$DATE.sql"

echo "Backup completed: $DATE"
```

### Recovery Procedures

```bash
# Restore from backup
supabase db reset
psql -h localhost -p 54322 -U postgres -d postgres < backups/complete_20240101_120000.sql

# Restore specific tables
pg_restore --host localhost --port 54322 --username postgres --dbname postgres --table chats backups/data_20240101_120000.sql
```

## Environment Management

### Multi-Environment Setup

```bash
# Link to different environments
supabase link --project-ref $STAGING_PROJECT_ID
supabase link --project-ref $PRODUCTION_PROJECT_ID

# Deploy to specific environment
supabase db push --linked --include-seed
```

### Environment Variables Management

```typescript
// lib/config.ts
const config = {
  supabase: {
    url: process.env.NEXT_PUBLIC_SUPABASE_URL!,
    anonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    serviceRoleKey: process.env.SUPABASE_SERVICE_ROLE_KEY!
  },
  database: {
    maxConnections: parseInt(process.env.DB_MAX_CONNECTIONS || '10'),
    connectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT || '30000')
  }
}

export default config
```
